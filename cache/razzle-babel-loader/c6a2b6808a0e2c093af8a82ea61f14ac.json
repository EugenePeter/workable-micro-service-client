{"ast":null,"code":"import { send } from 'xstate';\nconst actions = {\n  invokeWorkflow: send(({\n    workflow_type,\n    params,\n    persist\n  }) => ({\n    type: 'WORKFLOW',\n    workflow_type,\n    params,\n    persist\n  }), {\n    to: 'socketConnectionService'\n  }),\n  sendAuthKey: send(() => ({\n    type: 'AUTHORIZE',\n    payload: {\n      key: 'DNAMicro!!'\n    }\n  }), {\n    to: 'socketConnectionService'\n  }),\n  sendToSocketService: send(({\n    workflow_type\n  }, e) => ({\n    type: 'WORKFLOW_INPUT',\n    workflow_type,\n    payload: e\n  }), {\n    to: 'socketConnectionService'\n  })\n};\nexport default actions;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/options/actions/senders.ts"],"names":["send","actions","invokeWorkflow","workflow_type","params","persist","type","to","sendAuthKey","payload","key","sendToSocketService","e"],"mappings":"AAAA,SAA4BA,IAA5B,QAAwC,QAAxC;AAGA,MAAMC,OAAoD,GAAG;AAC3DC,EAAAA,cAAc,EAAEF,IAAI,CAClB,CAAC;AAAEG,IAAAA,aAAF;AAAiBC,IAAAA,MAAjB;AAAyBC,IAAAA;AAAzB,GAAD,MAAyC;AACvCC,IAAAA,IAAI,EAAE,UADiC;AAEvCH,IAAAA,aAFuC;AAGvCC,IAAAA,MAHuC;AAIvCC,IAAAA;AAJuC,GAAzC,CADkB,EAOlB;AAAEE,IAAAA,EAAE,EAAE;AAAN,GAPkB,CADuC;AAU3DC,EAAAA,WAAW,EAAER,IAAI,CACf,OAAO;AACLM,IAAAA,IAAI,EAAE,WADD;AAELG,IAAAA,OAAO,EAAE;AACPC,MAAAA,GAAG,EAAE;AADE;AAFJ,GAAP,CADe,EAOf;AAAEH,IAAAA,EAAE,EAAE;AAAN,GAPe,CAV0C;AAmB3DI,EAAAA,mBAAmB,EAAEX,IAAI,CACvB,CAAC;AAAEG,IAAAA;AAAF,GAAD,EAAoBS,CAApB,MAA2B;AACzBN,IAAAA,IAAI,EAAE,gBADmB;AAEzBH,IAAAA,aAFyB;AAGzBM,IAAAA,OAAO,EAAEG;AAHgB,GAA3B,CADuB,EAMvB;AAAEL,IAAAA,EAAE,EAAE;AAAN,GANuB;AAnBkC,CAA7D;AA6BA,eAAeN,OAAf","sourcesContent":["import { ActionFunctionMap, send } from 'xstate';\nimport { IContext, IMachineEvents } from '../../types';\n\nconst actions: ActionFunctionMap<IContext, IMachineEvents> = {\n  invokeWorkflow: send(\n    ({ workflow_type, params, persist }) => ({\n      type: 'WORKFLOW',\n      workflow_type,\n      params,\n      persist,\n    }),\n    { to: 'socketConnectionService' },\n  ),\n  sendAuthKey: send(\n    () => ({\n      type: 'AUTHORIZE',\n      payload: {\n        key: 'DNAMicro!!',\n      },\n    }),\n    { to: 'socketConnectionService' },\n  ),\n  sendToSocketService: send(\n    ({ workflow_type }, e) => ({\n      type: 'WORKFLOW_INPUT',\n      workflow_type,\n      payload: e,\n    }),\n    { to: 'socketConnectionService' },\n  ),\n};\n\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}