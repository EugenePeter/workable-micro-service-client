{"ast":null,"code":"import store from \"store2\";\nimport io from \"socket.io-client\";\n\nvar toSessionKey = function toSessionKey(workflow_type, instance) {\n  return \"session:\".concat(workflow_type, \"-\").concat(instance);\n};\n\nvar services = {\n  connectToSocketServer: function connectToSocketServer(context) {\n    return function (send, onEvent) {\n      var workflow_type = context.workflow_type,\n          instance = context.instance,\n          _context$namespace = context.namespace,\n          namespace = _context$namespace === void 0 ? \"/socket.io\" : _context$namespace,\n          replicated_session_token = context.session_token,\n          _context$socket_host = context.socket_host,\n          socket_host = _context$socket_host === void 0 ? \"\" : _context$socket_host;\n      var session_token = replicated_session_token ? replicated_session_token : store.get(toSessionKey(workflow_type, instance));\n      console.log(\"replicated_session_token \".concat(workflow_type), replicated_session_token);\n      console.log(\"SESSION TOKEN USED \".concat(workflow_type), session_token); // const socket = io({\n      //   query: {\n      //     session_token,\n      //   },\n      // });\n\n      var socket = io({\n        host: socket_host ? socket_host : undefined,\n        path: namespace,\n        query: {\n          session_token: session_token\n        }\n      });\n\n      var handleConnection = function handleConnection() {\n        console.log(\"SOCKET CONNECTED\");\n        send(\"CONNECTED\");\n      };\n\n      var handleDisconnection = function handleDisconnection() {\n        console.log(\"DISCONNECTED\");\n        send(\"DISCONNECTED\");\n      };\n\n      var handleMessage = function handleMessage(data) {\n        send(data);\n      };\n\n      socket.on(\"connect\", handleConnection);\n      socket.on(\"disconnect\", handleDisconnection);\n      socket.on(\"message\", handleMessage);\n      onEvent(function (event) {\n        console.log(\"Event:\", event);\n        socket.emit(\"message\", event);\n      });\n      return function () {\n        socket.removeListener(\"connect\", handleConnection);\n        socket.removeListener(\"disconnect\", handleDisconnection);\n        socket.removeListener(\"message\", handleMessage);\n      };\n    };\n  },\n  connectToSocketServer2: function connectToSocketServer2(context) {\n    return function (send) {};\n  }\n};\nexport default services;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/options/services/callbacks.ts"],"names":["store","io","toSessionKey","workflow_type","instance","services","connectToSocketServer","context","send","onEvent","namespace","replicated_session_token","session_token","socket_host","get","console","log","socket","host","undefined","path","query","handleConnection","handleDisconnection","handleMessage","data","on","event","emit","removeListener","connectToSocketServer2"],"mappings":"AACA,OAAOA,KAAP,MAAkB,QAAlB;AAGA,OAAOC,EAAP,MAAe,kBAAf;;AAGA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,aAAD,EAAwBC,QAAxB;AAAA,2BAAiED,aAAjE,cAAkFC,QAAlF;AAAA,CAArB;;AAEA,IAAMC,QAA0D,GAAG;AAC/DC,EAAAA,qBAAqB,EAAE,+BAACC,OAAD;AAAA,WAAa,UAACC,IAAD,EAAOC,OAAP,EAAmB;AACnD,UAAQN,aAAR,GAAyHI,OAAzH,CAAQJ,aAAR;AAAA,UAAuBC,QAAvB,GAAyHG,OAAzH,CAAuBH,QAAvB;AAAA,+BAAyHG,OAAzH,CAAiCG,SAAjC;AAAA,UAAiCA,SAAjC,mCAA6C,YAA7C;AAAA,UAA0EC,wBAA1E,GAAyHJ,OAAzH,CAA2DK,aAA3D;AAAA,iCAAyHL,OAAzH,CAAoGM,WAApG;AAAA,UAAoGA,WAApG,qCAAkH,EAAlH;AAEA,UAAMD,aAAa,GAAGD,wBAAwB,GAAGA,wBAAH,GAA8BX,KAAK,CAACc,GAAN,CAAUZ,YAAY,CAACC,aAAD,EAAgBC,QAAhB,CAAtB,CAA5E;AAEAW,MAAAA,OAAO,CAACC,GAAR,oCAAwCb,aAAxC,GAAyDQ,wBAAzD;AACAI,MAAAA,OAAO,CAACC,GAAR,8BAAkCb,aAAlC,GAAmDS,aAAnD,EANmD,CAQnD;AACA;AACA;AACA;AACA;;AAEA,UAAMK,MAAM,GAAGhB,EAAE,CAAC;AACdiB,QAAAA,IAAI,EAAEL,WAAW,GAAGA,WAAH,GAAiBM,SADpB;AAEdC,QAAAA,IAAI,EAAEV,SAFQ;AAGdW,QAAAA,KAAK,EAAE;AACHT,UAAAA,aAAa,EAAbA;AADG;AAHO,OAAD,CAAjB;;AAQA,UAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3BP,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAR,QAAAA,IAAI,CAAC,WAAD,CAAJ;AACH,OAHD;;AAIA,UAAMe,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9BR,QAAAA,OAAO,CAACC,GAAR;AACAR,QAAAA,IAAI,CAAC,cAAD,CAAJ;AACH,OAHD;;AAIA,UAAMgB,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAA0B;AAC5CjB,QAAAA,IAAI,CAACiB,IAAD,CAAJ;AACH,OAFD;;AAIAR,MAAAA,MAAM,CAACS,EAAP,CAAU,SAAV,EAAqBJ,gBAArB;AACAL,MAAAA,MAAM,CAACS,EAAP,CAAU,YAAV,EAAwBH,mBAAxB;AACAN,MAAAA,MAAM,CAACS,EAAP,CAAU,SAAV,EAAqBF,aAArB;AAEAf,MAAAA,OAAO,CAAC,UAACkB,KAAD,EAA2B;AAC/BZ,QAAAA,OAAO,CAACC,GAAR,WAAsBW,KAAtB;AACAV,QAAAA,MAAM,CAACW,IAAP,CAAY,SAAZ,EAAuBD,KAAvB;AACH,OAHM,CAAP;AAKA,aAAO,YAAM;AACTV,QAAAA,MAAM,CAACY,cAAP,CAAsB,SAAtB,EAAiCP,gBAAjC;AACAL,QAAAA,MAAM,CAACY,cAAP,CAAsB,YAAtB,EAAoCN,mBAApC;AACAN,QAAAA,MAAM,CAACY,cAAP,CAAsB,SAAtB,EAAiCL,aAAjC;AACH,OAJD;AAKH,KAhDsB;AAAA,GADwC;AAmD/DM,EAAAA,sBAAsB,EAAE,gCAACvB,OAAD;AAAA,WAAa,UAACC,IAAD,EAAU,CAAE,CAAzB;AAAA;AAnDuC,CAAnE;AAsDA,eAAeH,QAAf","sourcesContent":["import { ServiceConfig, AnyEventObject } from \"xstate\";\nimport store from \"store2\";\nimport { IContext, IMachineEvents } from \"../../types\";\nimport { IRecord } from \"../../types\";\nimport io from \"socket.io-client\";\nimport { connect } from \"http2\";\n\nconst toSessionKey = (workflow_type: string, instance: string | number) => `session:${workflow_type}-${instance}`;\n\nconst services: IRecord<ServiceConfig<IContext, IMachineEvents>> = {\n    connectToSocketServer: (context) => (send, onEvent) => {\n        const { workflow_type, instance, namespace = \"/socket.io\", session_token: replicated_session_token, socket_host = \"\" } = context;\n\n        const session_token = replicated_session_token ? replicated_session_token : store.get(toSessionKey(workflow_type, instance));\n\n        console.log(`replicated_session_token ${workflow_type}`, replicated_session_token);\n        console.log(`SESSION TOKEN USED ${workflow_type}`, session_token);\n\n        // const socket = io({\n        //   query: {\n        //     session_token,\n        //   },\n        // });\n\n        const socket = io({\n            host: socket_host ? socket_host : undefined,\n            path: namespace,\n            query: {\n                session_token,\n            },\n        });\n\n        const handleConnection = () => {\n            console.log(\"SOCKET CONNECTED\");\n            send(\"CONNECTED\");\n        };\n        const handleDisconnection = () => {\n            console.log(`DISCONNECTED`);\n            send(\"DISCONNECTED\");\n        };\n        const handleMessage = (data: AnyEventObject) => {\n            send(data);\n        };\n\n        socket.on(\"connect\", handleConnection);\n        socket.on(\"disconnect\", handleDisconnection);\n        socket.on(\"message\", handleMessage);\n\n        onEvent((event: AnyEventObject) => {\n            console.log(`Event:`, event);\n            socket.emit(\"message\", event);\n        });\n\n        return () => {\n            socket.removeListener(\"connect\", handleConnection);\n            socket.removeListener(\"disconnect\", handleDisconnection);\n            socket.removeListener(\"message\", handleMessage);\n        };\n    },\n\n    connectToSocketServer2: (context) => (send) => {},\n};\n\nexport default services;\n"]},"metadata":{},"sourceType":"module"}