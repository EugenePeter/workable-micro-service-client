{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport loggers from './loggers';\nimport spawners from './spawners';\nimport senders from './senders';\nimport assigners from './assigners';\n\nconst actions = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, assigners), loggers), senders), spawners);\n\nexport default actions;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/options/actions/index.ts"],"names":["loggers","spawners","senders","assigners","actions"],"mappings":";;;;;;AAGA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,OAAoD,+DACrDD,SADqD,GAErDH,OAFqD,GAGrDE,OAHqD,GAIrDD,QAJqD,CAA1D;;AAOA,eAAeG,OAAf","sourcesContent":["import { ActionFunctionMap } from 'xstate';\nimport { IContext, IMachineEvents } from '../../types';\n\nimport loggers from './loggers';\nimport spawners from './spawners';\nimport senders from './senders';\nimport assigners from './assigners';\n\nconst actions: ActionFunctionMap<IContext, IMachineEvents> = {\n  ...assigners,\n  ...loggers,\n  ...senders,\n  ...spawners,\n};\n\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}