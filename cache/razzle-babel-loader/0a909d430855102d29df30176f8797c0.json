{"ast":null,"code":"import _slicedToArray from \"H:/dev/my_workflow/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"H:\\\\dev\\\\my_workflow\\\\my-app\\\\src\\\\client\\\\applications\\\\search-vacancies\\\\SearchProvider.tsx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React, { createContext } from \"react\"; // import { useGlobalStore, PeekMachine } from \"../../hooks/use-global-state\";\n\nimport { startMachine, peekMachine } from \"./machine\";\nimport SearchContext from \"./context/stateContext\";\nexport var DispatchSearch = /*#__PURE__*/createContext(null);\nvar authService = {\n  name: \"eugene peter maestrado\"\n};\n\nvar SearchVacanciesProvider = function SearchVacanciesProvider(props) {\n  var _startMachine = startMachine({\n    message: \"test\"\n  }),\n      _startMachine2 = _slicedToArray(_startMachine, 2),\n      state = _startMachine2[0],\n      send = _startMachine2[1];\n\n  var _peekMachine = peekMachine(),\n      _peekMachine2 = _slicedToArray(_peekMachine, 3),\n      actor = _peekMachine2[0],\n      compare = _peekMachine2[1],\n      interpretedSend = _peekMachine2[2];\n\n  console.log(\"ACTOR:\", actor);\n  console.log(\"STATE:\", state);\n  var actions = {\n    interpretedSend: interpretedSend,\n    send: send\n  };\n  return __jsx(SearchContext.Provider, {\n    value: {\n      state: state,\n      actor: actor,\n      actions: actions\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(DispatchSearch.Provider, {\n    value: \"test\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, props.children));\n};\n\nexport default SearchVacanciesProvider;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/SearchProvider.tsx"],"names":["React","createContext","startMachine","peekMachine","SearchContext","DispatchSearch","authService","name","SearchVacanciesProvider","props","message","state","send","actor","compare","interpretedSend","console","log","actions","children"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAA+C,OAA/C,C,CACA;;AAEA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,WAA1C;AAEA,OAAOC,aAAP,MAA0B,wBAA1B;AAEA,OAAO,IAAMC,cAAc,gBAAGJ,aAAa,CAAC,IAAD,CAApC;AAEP,IAAMK,WAAW,GAAG;AAChBC,EAAAA,IAAI,EAAE;AADU,CAApB;;AAGA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAW;AACvC,sBAAsBP,YAAY,CAAC;AAC/BQ,IAAAA,OAAO,EAAE;AADsB,GAAD,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,IAAd;;AAGA,qBAA0CT,WAAW,EAArD;AAAA;AAAA,MAAOU,KAAP;AAAA,MAAcC,OAAd;AAAA,MAAuBC,eAAvB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,KAAtB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBN,KAAtB;AAEA,MAAMO,OAAO,GAAG;AACZH,IAAAA,eAAe,EAAfA,eADY;AAEZH,IAAAA,IAAI,EAAJA;AAFY,GAAhB;AAIA,SACI,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAED,MAAAA,KAAK,EAALA,KAAF;AAASE,MAAAA,KAAK,EAALA,KAAT;AAAgBK,MAAAA,OAAO,EAAPA;AAAhB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,KAAK,CAACU,QADX,CADJ,CADJ;AAOH,CAnBD;;AAqBA,eAAeX,uBAAf","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n// import { useGlobalStore, PeekMachine } from \"../../hooks/use-global-state\";\r\n\r\nimport { startMachine, peekMachine } from \"./machine\";\r\n\r\nimport SearchContext from \"./context/stateContext\";\r\nimport SearchVacancies from \"./SearchVacancies\";\r\nexport const DispatchSearch = createContext(null);\r\n\r\nconst authService = {\r\n    name: \"eugene peter maestrado\",\r\n};\r\nconst SearchVacanciesProvider = (props) => {\r\n    const [state, send] = startMachine({\r\n        message: \"test\",\r\n    });\r\n    const [actor, compare, interpretedSend] = peekMachine();\r\n    console.log(\"ACTOR:\", actor);\r\n    console.log(\"STATE:\", state);\r\n\r\n    const actions = {\r\n        interpretedSend,\r\n        send,\r\n    };\r\n    return (\r\n        <SearchContext.Provider value={{ state, actor, actions }}>\r\n            <DispatchSearch.Provider value={\"test\"}>\r\n                {props.children}\r\n            </DispatchSearch.Provider>\r\n        </SearchContext.Provider>\r\n    );\r\n};\r\n\r\nexport default SearchVacanciesProvider;\r\n"]},"metadata":{},"sourceType":"module"}