{"ast":null,"code":"import store from 'store2';\n\nconst toCacheKey = (workflow_type, instance) => `state:${workflow_type}-${instance}`;\n\nconst services = {\n  checkCache: ({\n    workflow_type,\n    instance\n  }) => new Promise((res, rej) => {\n    const cache_key = store.get(toCacheKey(workflow_type, instance));\n\n    if (!cache_key) {\n      rej(new Error('Cache does not exist'));\n    }\n\n    res(cache_key);\n  })\n};\nexport default services;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/options/services/promises.ts"],"names":["store","toCacheKey","workflow_type","instance","services","checkCache","Promise","res","rej","cache_key","get","Error"],"mappings":"AAGA,OAAOA,KAAP,MAAkB,QAAlB;;AAEA,MAAMC,UAAU,GAAG,CAACC,aAAD,EAAwBC,QAAxB,KAChB,SAAQD,aAAc,IAAGC,QAAS,EADrC;;AAGA,MAAMC,QAA0D,GAAG;AACjEC,EAAAA,UAAU,EAAE,CAAC;AAAEH,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,KACV,IAAIG,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxB,UAAMC,SAAS,GAAGT,KAAK,CAACU,GAAN,CAAUT,UAAU,CAACC,aAAD,EAAgBC,QAAhB,CAApB,CAAlB;;AACA,QAAI,CAACM,SAAL,EAAgB;AACdD,MAAAA,GAAG,CAAC,IAAIG,KAAJ,CAAU,sBAAV,CAAD,CAAH;AACD;;AACDJ,IAAAA,GAAG,CAACE,SAAD,CAAH;AACD,GAND;AAF+D,CAAnE;AAWA,eAAeL,QAAf","sourcesContent":["import { ServiceConfig } from 'xstate';\nimport { IContext, IMachineEvents } from '../../types';\nimport { IRecord } from '../../types';\nimport store from 'store2';\n\nconst toCacheKey = (workflow_type: string, instance: string | number) =>\n  `state:${workflow_type}-${instance}`;\n\nconst services: IRecord<ServiceConfig<IContext, IMachineEvents>> = {\n  checkCache: ({ workflow_type, instance }) =>\n    new Promise((res, rej) => {\n      const cache_key = store.get(toCacheKey(workflow_type, instance));\n      if (!cache_key) {\n        rej(new Error('Cache does not exist'));\n      }\n      res(cache_key);\n    }),\n};\n\nexport default services;\n"]},"metadata":{},"sourceType":"module"}