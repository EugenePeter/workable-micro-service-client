{"ast":null,"code":"import { send } from 'xstate';\nvar actions = {\n  invokeWorkflow: send(function (_ref) {\n    var workflow_type = _ref.workflow_type,\n        params = _ref.params,\n        persist = _ref.persist;\n    return {\n      type: 'WORKFLOW',\n      workflow_type: workflow_type,\n      params: params,\n      persist: persist\n    };\n  }, {\n    to: 'socketConnectionService'\n  }),\n  sendAuthKey: send(function () {\n    return {\n      type: 'AUTHORIZE',\n      payload: {\n        key: 'DNAMicro!!'\n      }\n    };\n  }, {\n    to: 'socketConnectionService'\n  }),\n  sendToSocketService: send(function (_ref2, e) {\n    var workflow_type = _ref2.workflow_type;\n    return {\n      type: 'WORKFLOW_INPUT',\n      workflow_type: workflow_type,\n      payload: e\n    };\n  }, {\n    to: 'socketConnectionService'\n  })\n};\nexport default actions;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/options/actions/senders.ts"],"names":["send","actions","invokeWorkflow","workflow_type","params","persist","type","to","sendAuthKey","payload","key","sendToSocketService","e"],"mappings":"AAAA,SAA4BA,IAA5B,QAAwC,QAAxC;AAGA,IAAMC,OAAoD,GAAG;AAC3DC,EAAAA,cAAc,EAAEF,IAAI,CAClB;AAAA,QAAGG,aAAH,QAAGA,aAAH;AAAA,QAAkBC,MAAlB,QAAkBA,MAAlB;AAAA,QAA0BC,OAA1B,QAA0BA,OAA1B;AAAA,WAAyC;AACvCC,MAAAA,IAAI,EAAE,UADiC;AAEvCH,MAAAA,aAAa,EAAbA,aAFuC;AAGvCC,MAAAA,MAAM,EAANA,MAHuC;AAIvCC,MAAAA,OAAO,EAAPA;AAJuC,KAAzC;AAAA,GADkB,EAOlB;AAAEE,IAAAA,EAAE,EAAE;AAAN,GAPkB,CADuC;AAU3DC,EAAAA,WAAW,EAAER,IAAI,CACf;AAAA,WAAO;AACLM,MAAAA,IAAI,EAAE,WADD;AAELG,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,EAAE;AADE;AAFJ,KAAP;AAAA,GADe,EAOf;AAAEH,IAAAA,EAAE,EAAE;AAAN,GAPe,CAV0C;AAmB3DI,EAAAA,mBAAmB,EAAEX,IAAI,CACvB,iBAAoBY,CAApB;AAAA,QAAGT,aAAH,SAAGA,aAAH;AAAA,WAA2B;AACzBG,MAAAA,IAAI,EAAE,gBADmB;AAEzBH,MAAAA,aAAa,EAAbA,aAFyB;AAGzBM,MAAAA,OAAO,EAAEG;AAHgB,KAA3B;AAAA,GADuB,EAMvB;AAAEL,IAAAA,EAAE,EAAE;AAAN,GANuB;AAnBkC,CAA7D;AA6BA,eAAeN,OAAf","sourcesContent":["import { ActionFunctionMap, send } from 'xstate';\nimport { IContext, IMachineEvents } from '../../types';\n\nconst actions: ActionFunctionMap<IContext, IMachineEvents> = {\n  invokeWorkflow: send(\n    ({ workflow_type, params, persist }) => ({\n      type: 'WORKFLOW',\n      workflow_type,\n      params,\n      persist,\n    }),\n    { to: 'socketConnectionService' },\n  ),\n  sendAuthKey: send(\n    () => ({\n      type: 'AUTHORIZE',\n      payload: {\n        key: 'DNAMicro!!',\n      },\n    }),\n    { to: 'socketConnectionService' },\n  ),\n  sendToSocketService: send(\n    ({ workflow_type }, e) => ({\n      type: 'WORKFLOW_INPUT',\n      workflow_type,\n      payload: e,\n    }),\n    { to: 'socketConnectionService' },\n  ),\n};\n\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}