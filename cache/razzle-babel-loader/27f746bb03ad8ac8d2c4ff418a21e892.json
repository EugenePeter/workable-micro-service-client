{"ast":null,"code":"import store from \"store2\";\nimport io from \"socket.io-client\";\n\nconst toSessionKey = (workflow_type, instance) => `session:${workflow_type}-${instance}`;\n\nconst services = {\n  connectToSocketServer: context => (send, onEvent) => {\n    const {\n      workflow_type,\n      instance,\n      namespace = \"/socket.io\",\n      session_token: replicated_session_token,\n      socket_host = \"\"\n    } = context;\n    const session_token = replicated_session_token ? replicated_session_token : store.get(toSessionKey(workflow_type, instance));\n    console.log(`replicated_session_token ${workflow_type}`, replicated_session_token);\n    console.log(`SESSION TOKEN USED ${workflow_type}`, session_token); // const socket = io({\n    //   query: {\n    //     session_token,\n    //   },\n    // });\n\n    const socket = io({\n      host: socket_host ? socket_host : undefined,\n      path: namespace,\n      query: {\n        session_token\n      }\n    });\n\n    const handleConnection = () => {\n      console.log(\"SOCKET CONNECTED\");\n      send(\"CONNECTED\");\n    };\n\n    const handleDisconnection = () => {\n      console.log(`DISCONNECTED`);\n      send(\"DISCONNECTED\");\n    };\n\n    const handleMessage = data => {\n      send(data);\n    };\n\n    socket.on(\"connect\", handleConnection);\n    socket.on(\"disconnect\", handleDisconnection);\n    socket.on(\"message\", handleMessage);\n    onEvent(event => {\n      console.log(`Event:`, event);\n      socket.emit(\"message\", event);\n    });\n    return () => {\n      socket.removeListener(\"connect\", handleConnection);\n      socket.removeListener(\"disconnect\", handleDisconnection);\n      socket.removeListener(\"message\", handleMessage);\n    };\n  },\n  connectToSocketServer2: context => send => {}\n};\nexport default services;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/options/services/callbacks.ts"],"names":["store","io","toSessionKey","workflow_type","instance","services","connectToSocketServer","context","send","onEvent","namespace","session_token","replicated_session_token","socket_host","get","console","log","socket","host","undefined","path","query","handleConnection","handleDisconnection","handleMessage","data","on","event","emit","removeListener","connectToSocketServer2"],"mappings":"AACA,OAAOA,KAAP,MAAkB,QAAlB;AAGA,OAAOC,EAAP,MAAe,kBAAf;;AAGA,MAAMC,YAAY,GAAG,CAACC,aAAD,EAAwBC,QAAxB,KAAuD,WAAUD,aAAc,IAAGC,QAAS,EAAhH;;AAEA,MAAMC,QAA0D,GAAG;AAC/DC,EAAAA,qBAAqB,EAAGC,OAAD,IAAa,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACnD,UAAM;AAAEN,MAAAA,aAAF;AAAiBC,MAAAA,QAAjB;AAA2BM,MAAAA,SAAS,GAAG,YAAvC;AAAqDC,MAAAA,aAAa,EAAEC,wBAApE;AAA8FC,MAAAA,WAAW,GAAG;AAA5G,QAAmHN,OAAzH;AAEA,UAAMI,aAAa,GAAGC,wBAAwB,GAAGA,wBAAH,GAA8BZ,KAAK,CAACc,GAAN,CAAUZ,YAAY,CAACC,aAAD,EAAgBC,QAAhB,CAAtB,CAA5E;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAa,4BAA2Bb,aAAc,EAAtD,EAAyDS,wBAAzD;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBb,aAAc,EAAhD,EAAmDQ,aAAnD,EANmD,CAQnD;AACA;AACA;AACA;AACA;;AAEA,UAAMM,MAAM,GAAGhB,EAAE,CAAC;AACdiB,MAAAA,IAAI,EAAEL,WAAW,GAAGA,WAAH,GAAiBM,SADpB;AAEdC,MAAAA,IAAI,EAAEV,SAFQ;AAGdW,MAAAA,KAAK,EAAE;AACHV,QAAAA;AADG;AAHO,KAAD,CAAjB;;AAQA,UAAMW,gBAAgB,GAAG,MAAM;AAC3BP,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAR,MAAAA,IAAI,CAAC,WAAD,CAAJ;AACH,KAHD;;AAIA,UAAMe,mBAAmB,GAAG,MAAM;AAC9BR,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAb;AACAR,MAAAA,IAAI,CAAC,cAAD,CAAJ;AACH,KAHD;;AAIA,UAAMgB,aAAa,GAAIC,IAAD,IAA0B;AAC5CjB,MAAAA,IAAI,CAACiB,IAAD,CAAJ;AACH,KAFD;;AAIAR,IAAAA,MAAM,CAACS,EAAP,CAAU,SAAV,EAAqBJ,gBAArB;AACAL,IAAAA,MAAM,CAACS,EAAP,CAAU,YAAV,EAAwBH,mBAAxB;AACAN,IAAAA,MAAM,CAACS,EAAP,CAAU,SAAV,EAAqBF,aAArB;AAEAf,IAAAA,OAAO,CAAEkB,KAAD,IAA2B;AAC/BZ,MAAAA,OAAO,CAACC,GAAR,CAAa,QAAb,EAAsBW,KAAtB;AACAV,MAAAA,MAAM,CAACW,IAAP,CAAY,SAAZ,EAAuBD,KAAvB;AACH,KAHM,CAAP;AAKA,WAAO,MAAM;AACTV,MAAAA,MAAM,CAACY,cAAP,CAAsB,SAAtB,EAAiCP,gBAAjC;AACAL,MAAAA,MAAM,CAACY,cAAP,CAAsB,YAAtB,EAAoCN,mBAApC;AACAN,MAAAA,MAAM,CAACY,cAAP,CAAsB,SAAtB,EAAiCL,aAAjC;AACH,KAJD;AAKH,GAjD8D;AAmD/DM,EAAAA,sBAAsB,EAAGvB,OAAD,IAAcC,IAAD,IAAU,CAAE;AAnDc,CAAnE;AAsDA,eAAeH,QAAf","sourcesContent":["import { ServiceConfig, AnyEventObject } from \"xstate\";\nimport store from \"store2\";\nimport { IContext, IMachineEvents } from \"../../types\";\nimport { IRecord } from \"../../types\";\nimport io from \"socket.io-client\";\nimport { connect } from \"http2\";\n\nconst toSessionKey = (workflow_type: string, instance: string | number) => `session:${workflow_type}-${instance}`;\n\nconst services: IRecord<ServiceConfig<IContext, IMachineEvents>> = {\n    connectToSocketServer: (context) => (send, onEvent) => {\n        const { workflow_type, instance, namespace = \"/socket.io\", session_token: replicated_session_token, socket_host = \"\" } = context;\n\n        const session_token = replicated_session_token ? replicated_session_token : store.get(toSessionKey(workflow_type, instance));\n\n        console.log(`replicated_session_token ${workflow_type}`, replicated_session_token);\n        console.log(`SESSION TOKEN USED ${workflow_type}`, session_token);\n\n        // const socket = io({\n        //   query: {\n        //     session_token,\n        //   },\n        // });\n\n        const socket = io({\n            host: socket_host ? socket_host : undefined,\n            path: namespace,\n            query: {\n                session_token,\n            },\n        });\n\n        const handleConnection = () => {\n            console.log(\"SOCKET CONNECTED\");\n            send(\"CONNECTED\");\n        };\n        const handleDisconnection = () => {\n            console.log(`DISCONNECTED`);\n            send(\"DISCONNECTED\");\n        };\n        const handleMessage = (data: AnyEventObject) => {\n            send(data);\n        };\n\n        socket.on(\"connect\", handleConnection);\n        socket.on(\"disconnect\", handleDisconnection);\n        socket.on(\"message\", handleMessage);\n\n        onEvent((event: AnyEventObject) => {\n            console.log(`Event:`, event);\n            socket.emit(\"message\", event);\n        });\n\n        return () => {\n            socket.removeListener(\"connect\", handleConnection);\n            socket.removeListener(\"disconnect\", handleDisconnection);\n            socket.removeListener(\"message\", handleMessage);\n        };\n    },\n\n    connectToSocketServer2: (context) => (send) => {},\n};\n\nexport default services;\n"]},"metadata":{},"sourceType":"module"}