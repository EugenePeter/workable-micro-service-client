{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport callbacks from './callbacks';\nimport promises from './promises';\n\nconst services = _objectSpread(_objectSpread({}, callbacks), promises);\n\nexport default services;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/options/services/index.ts"],"names":["callbacks","promises","services"],"mappings":";;;;;;AAIA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAA0D,mCAC3DF,SAD2D,GAE3DC,QAF2D,CAAhE;;AAKA,eAAeC,QAAf","sourcesContent":["import { ServiceConfig } from 'xstate';\nimport { IContext, IMachineEvents } from '../../types';\nimport { IRecord } from '../../types';\n\nimport callbacks from './callbacks';\nimport promises from './promises';\n\nconst services: IRecord<ServiceConfig<IContext, IMachineEvents>> = {\n  ...callbacks,\n  ...promises,\n};\n\nexport default services;\n"]},"metadata":{},"sourceType":"module"}