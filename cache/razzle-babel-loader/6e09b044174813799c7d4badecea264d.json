{"ast":null,"code":"import express from \"express\";\nimport { createProxyMiddleware } from \"http-proxy-middleware\";\nimport logger from \"./logger\";\nconst {\n  BASIC_AUTH_ENABLE = undefined,\n  BASIC_AUTH_USERNAME = \"\",\n  BASIC_AUTH_PASSWORD = \"\",\n  PLATFORM_SOCKET_HOST = \"http://localhost:2020\"\n} = process.env;\n\nconst log_middleware = (req, res, next) => {\n  const {\n    method,\n    originalUrl\n  } = req;\n  const {\n    statusCode\n  } = res;\n  logger.info(`${statusCode} ${method} ${originalUrl}`);\n  next();\n};\n\nconst auth_middleware = (req, res, next) => {\n  if (!BASIC_AUTH_ENABLE) {\n    return next();\n  }\n\n  const b64auth = (req.headers.authorization || \"\").split(\" \")[1] || \"\";\n  const [login, password] = Buffer.from(b64auth, \"base64\").toString().split(\":\");\n\n  if (!login || !password || login !== BASIC_AUTH_USERNAME || password !== BASIC_AUTH_PASSWORD) {\n    // Access granted...\n    return next();\n  }\n\n  res.set(\"WWW-Authenticate\", 'Basic realm=\"401\"');\n  return res.status(401).send({\n    code: \"401\",\n    message: \"Authentication required.\"\n  }); // -----------------------------------------------------------------------\n};\n\nconst middleWare = server => {\n  server.use(express.json());\n  server.use(\"/socket.io\", createProxyMiddleware({\n    target: PLATFORM_SOCKET_HOST,\n    ws: true,\n    logProvider: function () {\n      return logger;\n    }\n  }));\n  server.use(\"*\", log_middleware);\n  server.use(\"*\", auth_middleware);\n}; // Define Middleware Here\n\n\nexport default middleWare;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/server/middlewares.ts"],"names":["express","createProxyMiddleware","logger","BASIC_AUTH_ENABLE","undefined","BASIC_AUTH_USERNAME","BASIC_AUTH_PASSWORD","PLATFORM_SOCKET_HOST","process","env","log_middleware","req","res","next","method","originalUrl","statusCode","info","auth_middleware","b64auth","headers","authorization","split","login","password","Buffer","from","toString","set","status","send","code","message","middleWare","server","use","json","target","ws","logProvider"],"mappings":"AAAA,OAAOA,OAAP,MAAkE,SAAlE;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,MAAM;AAAEC,EAAAA,iBAAiB,GAAGC,SAAtB;AAAiCC,EAAAA,mBAAmB,GAAG,EAAvD;AAA2DC,EAAAA,mBAAmB,GAAG,EAAjF;AAAqFC,EAAAA,oBAAoB,GAAG;AAA5G,IAAwIC,OAAO,CAACC,GAAtJ;;AAEA,MAAMC,cAAc,GAAG,CAACC,GAAD,EAAeC,GAAf,EAA8BC,IAA9B,KAAqD;AACxE,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA0BJ,GAAhC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAiBJ,GAAvB;AACAV,EAAAA,MAAM,CAACe,IAAP,CAAa,GAAED,UAAW,IAAGF,MAAO,IAAGC,WAAY,EAAnD;AACAF,EAAAA,IAAI;AACP,CALD;;AAOA,MAAMK,eAAe,GAAG,CAACP,GAAD,EAAeC,GAAf,EAA8BC,IAA9B,KAAqD;AACzE,MAAI,CAACV,iBAAL,EAAwB;AACpB,WAAOU,IAAI,EAAX;AACH;;AAED,QAAMM,OAAO,GAAG,CAACR,GAAG,CAACS,OAAJ,CAAYC,aAAZ,IAA6B,EAA9B,EAAkCC,KAAlC,CAAwC,GAAxC,EAA6C,CAA7C,KAAmD,EAAnE;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqB,QAArB,EAA+BQ,QAA/B,GAA0CL,KAA1C,CAAgD,GAAhD,CAA1B;;AAEA,MAAI,CAACC,KAAD,IAAU,CAACC,QAAX,IAAuBD,KAAK,KAAKlB,mBAAjC,IAAwDmB,QAAQ,KAAKlB,mBAAzE,EAA8F;AAC1F;AACA,WAAOO,IAAI,EAAX;AACH;;AAEDD,EAAAA,GAAG,CAACgB,GAAJ,CAAQ,kBAAR,EAA4B,mBAA5B;AACA,SAAOhB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,IAAAA,IAAI,EAAE,KADkB;AAExBC,IAAAA,OAAO,EAAE;AAFe,GAArB,CAAP,CAdyE,CAmBzE;AACH,CApBD;;AAsBA,MAAMC,UAAoC,GAAIC,MAAD,IAAqB;AAC9DA,EAAAA,MAAM,CAACC,GAAP,CAAWnC,OAAO,CAACoC,IAAR,EAAX;AACAF,EAAAA,MAAM,CAACC,GAAP,CACI,YADJ,EAEIlC,qBAAqB,CAAC;AAClBoC,IAAAA,MAAM,EAAE9B,oBADU;AAElB+B,IAAAA,EAAE,EAAE,IAFc;AAGlBC,IAAAA,WAAW,EAAE,YAAY;AACrB,aAAOrC,MAAP;AACH;AALiB,GAAD,CAFzB;AAWAgC,EAAAA,MAAM,CAACC,GAAP,CAAW,GAAX,EAAgBzB,cAAhB;AAEAwB,EAAAA,MAAM,CAACC,GAAP,CAAW,GAAX,EAAgBjB,eAAhB;AACH,CAhBD,C,CAkBA;;;AACA,eAAee,UAAf","sourcesContent":["import express, { Express, Request, Response, NextFunction } from \"express\";\nimport { createProxyMiddleware } from \"http-proxy-middleware\";\nimport logger from \"./logger\";\nconst { BASIC_AUTH_ENABLE = undefined, BASIC_AUTH_USERNAME = \"\", BASIC_AUTH_PASSWORD = \"\", PLATFORM_SOCKET_HOST = \"http://localhost:2020\" } = process.env;\n\nconst log_middleware = (req: Request, res: Response, next: NextFunction) => {\n    const { method, originalUrl } = req;\n    const { statusCode } = res;\n    logger.info(`${statusCode} ${method} ${originalUrl}`);\n    next();\n};\n\nconst auth_middleware = (req: Request, res: Response, next: NextFunction) => {\n    if (!BASIC_AUTH_ENABLE) {\n        return next();\n    }\n\n    const b64auth = (req.headers.authorization || \"\").split(\" \")[1] || \"\";\n    const [login, password] = Buffer.from(b64auth, \"base64\").toString().split(\":\");\n\n    if (!login || !password || login !== BASIC_AUTH_USERNAME || password !== BASIC_AUTH_PASSWORD) {\n        // Access granted...\n        return next();\n    }\n\n    res.set(\"WWW-Authenticate\", 'Basic realm=\"401\"');\n    return res.status(401).send({\n        code: \"401\",\n        message: \"Authentication required.\",\n    });\n\n    // -----------------------------------------------------------------------\n};\n\nconst middleWare: (props: Express) => void = (server: Express) => {\n    server.use(express.json());\n    server.use(\n        \"/socket.io\",\n        createProxyMiddleware({\n            target: PLATFORM_SOCKET_HOST,\n            ws: true,\n            logProvider: function () {\n                return logger;\n            },\n        })\n    );\n\n    server.use(\"*\", log_middleware);\n\n    server.use(\"*\", auth_middleware);\n};\n\n// Define Middleware Here\nexport default middleWare;\n"]},"metadata":{},"sourceType":"module"}