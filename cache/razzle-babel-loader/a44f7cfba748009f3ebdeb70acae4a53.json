{"ast":null,"code":"import _slicedToArray from \"H:/dev/my_workflow/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"H:/dev/my_workflow/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createMachine } from \"xstate\";\nimport { useInterpret, useMachine, useActor, useSelector } from \"@xstate/react\";\nimport config from \"./config\";\nimport options from \"./options\";\nvar _process$env$PLATFORM = process.env.PLATFORM_SOCKET_HOST,\n    PLATFORM_SOCKET_HOST = _process$env$PLATFORM === void 0 ? \"http://localhost:3000\" : _process$env$PLATFORM;\nvar initial_context = {\n  machine_type: \"\",\n  test: \"hey\",\n  hello: {\n    message: \"this is a message\"\n  },\n  message: \"\",\n  socket_host: PLATFORM_SOCKET_HOST,\n  query: \"\",\n  query_results: []\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport var spawn = function spawn(context) {\n  return createMachine(_objectSpread(_objectSpread({}, config), {}, {\n    context: _objectSpread(_objectSpread({}, initial_context), context)\n  }), options);\n};\nvar running_machine;\nexport var startMachine = function startMachine(context) {\n  var machine = spawn(context);\n\n  var _useMachine = useMachine(machine),\n      _useMachine2 = _slicedToArray(_useMachine, 2),\n      state = _useMachine2[0],\n      send = _useMachine2[1];\n\n  running_machine = machine;\n  return [state, send, machine];\n};\n\nvar condition = function condition(state) {\n  return state.matches(\"loading\");\n};\n\nexport var peekMachine = function peekMachine() {\n  var interpret = useInterpret(running_machine);\n  console.log(\"interpret:\", interpret);\n  var interpretedSend = interpret.send;\n\n  var _useActor = useActor(interpret),\n      _useActor2 = _slicedToArray(_useActor, 1),\n      actor = _useActor2[0];\n\n  var compare = useSelector(interpret, condition);\n  return [actor, compare, interpretedSend, interpret, useSelector];\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport * from \"./types\";","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/index.ts"],"names":["createMachine","useInterpret","useMachine","useActor","useSelector","config","options","process","env","PLATFORM_SOCKET_HOST","initial_context","machine_type","test","hello","message","socket_host","query","query_results","spawn","context","running_machine","startMachine","machine","state","send","condition","matches","peekMachine","interpret","console","log","interpretedSend","actor","compare"],"mappings":";;AAAA,SAA6BA,aAA7B,QAAkD,QAAlD;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,QAAnC,EAA6CC,WAA7C,QAAgE,eAAhE;AAGA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,4BAA2DC,OAAO,CAACC,GAAnE,CAAQC,oBAAR;AAAA,IAAQA,oBAAR,sCAA+B,uBAA/B;AAEA,IAAMC,eAAoB,GAAG;AACzBC,EAAAA,YAAY,EAAE,EADW;AAEzBC,EAAAA,IAAI,EAAE,KAFmB;AAGzBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,OAAO,EAAE;AADN,GAHkB;AAMzBA,EAAAA,OAAO,EAAE,EANgB;AAOzBC,EAAAA,WAAW,EAAEN,oBAPY;AAQzBO,EAAAA,KAAK,EAAE,EARkB;AASzBC,EAAAA,aAAa,EAAE;AATU,CAA7B,C,CAYA;;AACA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,OAAD;AAAA,SACjBnB,aAAa,iCAEFK,MAFE;AAGLc,IAAAA,OAAO,kCACAT,eADA,GAEAS,OAFA;AAHF,MAQTb,OARS,CADI;AAAA,CAAd;AAYP,IAAIc,eAAJ;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACF,OAAD,EAAa;AACrC,MAAMG,OAAO,GAAGJ,KAAK,CAACC,OAAD,CAArB;;AACA,oBAAsBjB,UAAU,CAACoB,OAAD,CAAhC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,IAAd;;AACAJ,EAAAA,eAAe,GAAGE,OAAlB;AACA,SAAO,CAACC,KAAD,EAAQC,IAAR,EAAcF,OAAd,CAAP;AACH,CALM;;AAOP,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACF,KAAD,EAAW;AACzB,SAAOA,KAAK,CAACG,OAAN,CAAc,SAAd,CAAP;AACH,CAFD;;AAIA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B,MAAMC,SAAS,GAAG3B,YAAY,CAACmB,eAAD,CAA9B;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,SAA1B;AACA,MAAcG,eAAd,GAAkCH,SAAlC,CAAQJ,IAAR;;AACA,kBAAgBrB,QAAQ,CAACyB,SAAD,CAAxB;AAAA;AAAA,MAAOI,KAAP;;AACA,MAAMC,OAAO,GAAG7B,WAAW,CAACwB,SAAD,EAAYH,SAAZ,CAA3B;AACA,SAAO,CAACO,KAAD,EAAQC,OAAR,EAAiBF,eAAjB,EAAkCH,SAAlC,EAA6CxB,WAA7C,CAAP;AACH,CAPM,C,CASP;;AAEA,cAAc,SAAd","sourcesContent":["import { Machine, interpret, createMachine } from \"xstate\";\nimport { useInterpret, useMachine, useActor, useSelector } from \"@xstate/react\";\n\nimport { IContext } from \"./types\";\nimport config from \"./config\";\nimport options from \"./options\";\n\nconst { PLATFORM_SOCKET_HOST = \"http://localhost:3000\" } = process.env;\n\nconst initial_context: any = {\n    machine_type: \"\",\n    test: \"hey\",\n    hello: {\n        message: \"this is a message\",\n    },\n    message: \"\",\n    socket_host: PLATFORM_SOCKET_HOST,\n    query: \"\",\n    query_results: [],\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const spawn = (context: IContext) =>\n    createMachine(\n        {\n            ...config,\n            context: {\n                ...initial_context,\n                ...context,\n            },\n        },\n        options\n    );\n\nlet running_machine;\nexport const startMachine = (context) => {\n    const machine = spawn(context);\n    const [state, send] = useMachine(machine);\n    running_machine = machine;\n    return [state, send, machine];\n};\n\nconst condition = (state) => {\n    return state.matches(\"loading\");\n};\n\nexport const peekMachine = () => {\n    const interpret = useInterpret(running_machine);\n    console.log(\"interpret:\", interpret);\n    const { send: interpretedSend } = interpret;\n    const [actor] = useActor(interpret);\n    const compare = useSelector(interpret, condition);\n    return [actor, compare, interpretedSend, interpret, useSelector];\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport * from \"./types\";\n"]},"metadata":{},"sourceType":"module"}