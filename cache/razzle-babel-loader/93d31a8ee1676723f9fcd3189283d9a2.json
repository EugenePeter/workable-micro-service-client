{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createMachine } from \"xstate\";\nimport { useInterpret, useMachine, useActor, useSelector } from \"@xstate/react\";\nimport config from \"./config\";\nimport options from \"./options\";\nconst {\n  PLATFORM_SOCKET_HOST = \"http://localhost:3000\"\n} = process.env;\nconst initial_context = {\n  machine_type: \"\",\n  test: \"hey\",\n  hello: {\n    message: \"this is a message\"\n  },\n  message: \"\",\n  socket_host: PLATFORM_SOCKET_HOST,\n  query: \"\",\n  query_results: []\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport const spawn = context => createMachine(_objectSpread(_objectSpread({}, config), {}, {\n  context: _objectSpread(_objectSpread({}, initial_context), context)\n}), options);\nlet running_machine;\nexport const startMachine = context => {\n  const machine = spawn(context);\n  const [state, send] = useMachine(machine);\n  running_machine = machine;\n  return [state, send, machine];\n};\n\nconst condition = state => {\n  return state.matches(\"loading\");\n};\n\nexport const peekMachine = () => {\n  const interpret = useInterpret(running_machine);\n  console.log(\"interpret:\", interpret);\n  const {\n    send: interpretedSend\n  } = interpret;\n  const [actor] = useActor(interpret);\n  const compare = useSelector(interpret, condition);\n  return [actor, compare, interpretedSend, interpret, useSelector];\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport * from \"./types\";","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/index.ts"],"names":["createMachine","useInterpret","useMachine","useActor","useSelector","config","options","PLATFORM_SOCKET_HOST","process","env","initial_context","machine_type","test","hello","message","socket_host","query","query_results","spawn","context","running_machine","startMachine","machine","state","send","condition","matches","peekMachine","interpret","console","log","interpretedSend","actor","compare"],"mappings":";;;;;;AAAA,SAA6BA,aAA7B,QAAkD,QAAlD;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,QAAnC,EAA6CC,WAA7C,QAAgE,eAAhE;AAGA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAM;AAAEC,EAAAA,oBAAoB,GAAG;AAAzB,IAAqDC,OAAO,CAACC,GAAnE;AAEA,MAAMC,eAAoB,GAAG;AACzBC,EAAAA,YAAY,EAAE,EADW;AAEzBC,EAAAA,IAAI,EAAE,KAFmB;AAGzBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,OAAO,EAAE;AADN,GAHkB;AAMzBA,EAAAA,OAAO,EAAE,EANgB;AAOzBC,EAAAA,WAAW,EAAER,oBAPY;AAQzBS,EAAAA,KAAK,EAAE,EARkB;AASzBC,EAAAA,aAAa,EAAE;AATU,CAA7B,C,CAYA;;AACA,OAAO,MAAMC,KAAK,GAAIC,OAAD,IACjBnB,aAAa,iCAEFK,MAFE;AAGLc,EAAAA,OAAO,kCACAT,eADA,GAEAS,OAFA;AAHF,IAQTb,OARS,CADV;AAYP,IAAIc,eAAJ;AACA,OAAO,MAAMC,YAAY,GAAIF,OAAD,IAAa;AACrC,QAAMG,OAAO,GAAGJ,KAAK,CAACC,OAAD,CAArB;AACA,QAAM,CAACI,KAAD,EAAQC,IAAR,IAAgBtB,UAAU,CAACoB,OAAD,CAAhC;AACAF,EAAAA,eAAe,GAAGE,OAAlB;AACA,SAAO,CAACC,KAAD,EAAQC,IAAR,EAAcF,OAAd,CAAP;AACH,CALM;;AAOP,MAAMG,SAAS,GAAIF,KAAD,IAAW;AACzB,SAAOA,KAAK,CAACG,OAAN,CAAc,SAAd,CAAP;AACH,CAFD;;AAIA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,QAAMC,SAAS,GAAG3B,YAAY,CAACmB,eAAD,CAA9B;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,SAA1B;AACA,QAAM;AAAEJ,IAAAA,IAAI,EAAEO;AAAR,MAA4BH,SAAlC;AACA,QAAM,CAACI,KAAD,IAAU7B,QAAQ,CAACyB,SAAD,CAAxB;AACA,QAAMK,OAAO,GAAG7B,WAAW,CAACwB,SAAD,EAAYH,SAAZ,CAA3B;AACA,SAAO,CAACO,KAAD,EAAQC,OAAR,EAAiBF,eAAjB,EAAkCH,SAAlC,EAA6CxB,WAA7C,CAAP;AACH,CAPM,C,CASP;;AAEA,cAAc,SAAd","sourcesContent":["import { Machine, interpret, createMachine } from \"xstate\";\nimport { useInterpret, useMachine, useActor, useSelector } from \"@xstate/react\";\n\nimport { IContext } from \"./types\";\nimport config from \"./config\";\nimport options from \"./options\";\n\nconst { PLATFORM_SOCKET_HOST = \"http://localhost:3000\" } = process.env;\n\nconst initial_context: any = {\n    machine_type: \"\",\n    test: \"hey\",\n    hello: {\n        message: \"this is a message\",\n    },\n    message: \"\",\n    socket_host: PLATFORM_SOCKET_HOST,\n    query: \"\",\n    query_results: [],\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const spawn = (context: IContext) =>\n    createMachine(\n        {\n            ...config,\n            context: {\n                ...initial_context,\n                ...context,\n            },\n        },\n        options\n    );\n\nlet running_machine;\nexport const startMachine = (context) => {\n    const machine = spawn(context);\n    const [state, send] = useMachine(machine);\n    running_machine = machine;\n    return [state, send, machine];\n};\n\nconst condition = (state) => {\n    return state.matches(\"loading\");\n};\n\nexport const peekMachine = () => {\n    const interpret = useInterpret(running_machine);\n    console.log(\"interpret:\", interpret);\n    const { send: interpretedSend } = interpret;\n    const [actor] = useActor(interpret);\n    const compare = useSelector(interpret, condition);\n    return [actor, compare, interpretedSend, interpret, useSelector];\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport * from \"./types\";\n"]},"metadata":{},"sourceType":"module"}