{"ast":null,"code":"import io from \"socket.io-client\";\n\nvar toSessionKey = function toSessionKey(workflow_type, instance) {\n  return \"session:\".concat(workflow_type, \"-\").concat(instance);\n};\n\nvar services = {\n  connectToSocketServer: function connectToSocketServer(context) {\n    return function (send, onEvent) {\n      var socket_host = context.socket_host,\n          query = context.query;\n      var socket = io(socket_host);\n      console.log(\"IM AM RUNNING\", socket);\n\n      var socketConnected = function socketConnected() {\n        console.log(\"SOCKET CONNECTED\");\n        send(\"CONNECTED\");\n      };\n\n      var socketDisonnected = function socketDisonnected() {\n        console.log(\"SOCKET DISCONNECTED\");\n        send(\"SOCKET DISCONNECTED\");\n      };\n\n      var handleQueryResponse = function handleQueryResponse(data) {\n        console.log(\"DATA:\", data);\n        send({\n          type: \"GOT_QUERY_RESULTS\",\n          payload: data\n        });\n      };\n\n      socket.on(\"connect\", socketConnected);\n      socket.on(\"disconnect\", socketDisonnected);\n      socket.on(\"query_response\", handleQueryResponse);\n      socket.emit(\"query\", query); // onEvent((event: AnyEventObject) => {\n      //     console.log(\"MESSAGE RECIEVED FROM OWN MACHINE:\", event);\n      //     socket.emit(\"query\", event);\n      // });\n      // return () => {\n      //     socket.removeListener(\"connect\", socketConnected);\n      //     socket.removeListener(\"disconnect\", socketDisonnected);\n      //     socket.removeListener(\"message\", handleMessage);\n      // };\n    };\n  } // connectToSocketServer2: (context) => (send) => {},\n\n};\nexport default services;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/options/services/callbacks.ts"],"names":["io","toSessionKey","workflow_type","instance","services","connectToSocketServer","context","send","onEvent","socket_host","query","socket","console","log","socketConnected","socketDisonnected","handleQueryResponse","data","type","payload","on","emit"],"mappings":"AAIA,OAAOA,EAAP,MAAe,kBAAf;;AAGA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,aAAD,EAAwBC,QAAxB;AAAA,2BACND,aADM,cACWC,QADX;AAAA,CAArB;;AAGA,IAAMC,QAA0D,GAAG;AAC/DC,EAAAA,qBAAqB,EAAE,+BAACC,OAAD;AAAA,WAAa,UAACC,IAAD,EAAOC,OAAP,EAAmB;AACnD,UAAQC,WAAR,GAA+BH,OAA/B,CAAQG,WAAR;AAAA,UAAqBC,KAArB,GAA+BJ,OAA/B,CAAqBI,KAArB;AAEA,UAAMC,MAAM,GAAGX,EAAE,CAACS,WAAD,CAAjB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,MAA7B;;AACA,UAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BF,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAN,QAAAA,IAAI,CAAC,WAAD,CAAJ;AACH,OAHD;;AAIA,UAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5BH,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAN,QAAAA,IAAI,CAAC,qBAAD,CAAJ;AACH,OAHD;;AAIA,UAAMS,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAA0B;AAClDL,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBI,IAArB;AACAV,QAAAA,IAAI,CAAC;AACDW,UAAAA,IAAI,EAAE,mBADL;AAEDC,UAAAA,OAAO,EAAEF;AAFR,SAAD,CAAJ;AAIH,OAND;;AAQAN,MAAAA,MAAM,CAACS,EAAP,CAAU,SAAV,EAAqBN,eAArB;AACAH,MAAAA,MAAM,CAACS,EAAP,CAAU,YAAV,EAAwBL,iBAAxB;AACAJ,MAAAA,MAAM,CAACS,EAAP,CAAU,gBAAV,EAA4BJ,mBAA5B;AAEAL,MAAAA,MAAM,CAACU,IAAP,CAAY,OAAZ,EAAqBX,KAArB,EAzBmD,CA2BnD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACH,KArCsB;AAAA,GADwC,CAwC/D;;AAxC+D,CAAnE;AA2CA,eAAeN,QAAf","sourcesContent":["import { ServiceConfig, AnyEventObject } from \"xstate\";\nimport store from \"store2\";\nimport { IContext, IMachineEvents } from \"../../types\";\nimport { IRecord } from \"../../types\";\nimport io from \"socket.io-client\";\nimport { connect } from \"http2\";\n\nconst toSessionKey = (workflow_type: string, instance: string | number) =>\n    `session:${workflow_type}-${instance}`;\n\nconst services: IRecord<ServiceConfig<IContext, IMachineEvents>> = {\n    connectToSocketServer: (context) => (send, onEvent) => {\n        const { socket_host, query } = context;\n\n        const socket = io(socket_host);\n        console.log(\"IM AM RUNNING\", socket);\n        const socketConnected = () => {\n            console.log(\"SOCKET CONNECTED\");\n            send(\"CONNECTED\");\n        };\n        const socketDisonnected = () => {\n            console.log(\"SOCKET DISCONNECTED\");\n            send(\"SOCKET DISCONNECTED\");\n        };\n        const handleQueryResponse = (data: AnyEventObject) => {\n            console.log(\"DATA:\", data);\n            send({\n                type: \"GOT_QUERY_RESULTS\",\n                payload: data,\n            });\n        };\n\n        socket.on(\"connect\", socketConnected);\n        socket.on(\"disconnect\", socketDisonnected);\n        socket.on(\"query_response\", handleQueryResponse);\n\n        socket.emit(\"query\", query);\n\n        // onEvent((event: AnyEventObject) => {\n        //     console.log(\"MESSAGE RECIEVED FROM OWN MACHINE:\", event);\n        //     socket.emit(\"query\", event);\n        // });\n\n        // return () => {\n        //     socket.removeListener(\"connect\", socketConnected);\n        //     socket.removeListener(\"disconnect\", socketDisonnected);\n        //     socket.removeListener(\"message\", handleMessage);\n        // };\n    },\n\n    // connectToSocketServer2: (context) => (send) => {},\n};\n\nexport default services;\n"]},"metadata":{},"sourceType":"module"}