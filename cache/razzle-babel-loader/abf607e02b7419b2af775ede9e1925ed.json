{"ast":null,"code":"import io from \"socket.io-client\";\n\nconst toSessionKey = (workflow_type, instance) => `session:${workflow_type}-${instance}`;\n\nconst services = {\n  connectToSocketServer: context => (send, onEvent) => {\n    const {\n      socket_host,\n      query\n    } = context;\n    const socket = io(socket_host);\n    console.log(\"IM AM RUNNING\", socket);\n\n    const socketConnected = () => {\n      console.log(\"SOCKET CONNECTED\");\n      send(\"CONNECTED\");\n    };\n\n    const socketDisonnected = () => {\n      console.log(\"SOCKET DISCONNECTED\");\n      send(\"SOCKET DISCONNECTED\");\n    };\n\n    const handleQueryResponse = data => {\n      console.log(\"DATA:\", data);\n      send({\n        type: \"GOT_QUERY_RESULTS\",\n        payload: data\n      });\n    };\n\n    socket.on(\"connect\", socketConnected);\n    socket.on(\"disconnect\", socketDisonnected);\n    socket.on(\"query_response\", handleQueryResponse);\n    socket.emit(\"query\", query); // onEvent((event: AnyEventObject) => {\n    //     console.log(\"MESSAGE RECIEVED FROM OWN MACHINE:\", event);\n    //     socket.emit(\"query\", event);\n    // });\n    // return () => {\n    //     socket.removeListener(\"connect\", socketConnected);\n    //     socket.removeListener(\"disconnect\", socketDisonnected);\n    //     socket.removeListener(\"message\", handleMessage);\n    // };\n  } // connectToSocketServer2: (context) => (send) => {},\n\n};\nexport default services;","map":{"version":3,"sources":["H:/dev/my_workflow/my-app/src/client/applications/search-vacancies/machine/options/services/callbacks.ts"],"names":["io","toSessionKey","workflow_type","instance","services","connectToSocketServer","context","send","onEvent","socket_host","query","socket","console","log","socketConnected","socketDisonnected","handleQueryResponse","data","type","payload","on","emit"],"mappings":"AAIA,OAAOA,EAAP,MAAe,kBAAf;;AAGA,MAAMC,YAAY,GAAG,CAACC,aAAD,EAAwBC,QAAxB,KAChB,WAAUD,aAAc,IAAGC,QAAS,EADzC;;AAGA,MAAMC,QAA0D,GAAG;AAC/DC,EAAAA,qBAAqB,EAAGC,OAAD,IAAa,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACnD,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBJ,OAA/B;AAEA,UAAMK,MAAM,GAAGX,EAAE,CAACS,WAAD,CAAjB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,MAA7B;;AACA,UAAMG,eAAe,GAAG,MAAM;AAC1BF,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAN,MAAAA,IAAI,CAAC,WAAD,CAAJ;AACH,KAHD;;AAIA,UAAMQ,iBAAiB,GAAG,MAAM;AAC5BH,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAN,MAAAA,IAAI,CAAC,qBAAD,CAAJ;AACH,KAHD;;AAIA,UAAMS,mBAAmB,GAAIC,IAAD,IAA0B;AAClDL,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBI,IAArB;AACAV,MAAAA,IAAI,CAAC;AACDW,QAAAA,IAAI,EAAE,mBADL;AAEDC,QAAAA,OAAO,EAAEF;AAFR,OAAD,CAAJ;AAIH,KAND;;AAQAN,IAAAA,MAAM,CAACS,EAAP,CAAU,SAAV,EAAqBN,eAArB;AACAH,IAAAA,MAAM,CAACS,EAAP,CAAU,YAAV,EAAwBL,iBAAxB;AACAJ,IAAAA,MAAM,CAACS,EAAP,CAAU,gBAAV,EAA4BJ,mBAA5B;AAEAL,IAAAA,MAAM,CAACU,IAAP,CAAY,OAAZ,EAAqBX,KAArB,EAzBmD,CA2BnD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACH,GAtC8D,CAwC/D;;AAxC+D,CAAnE;AA2CA,eAAeN,QAAf","sourcesContent":["import { ServiceConfig, AnyEventObject } from \"xstate\";\nimport store from \"store2\";\nimport { IContext, IMachineEvents } from \"../../types\";\nimport { IRecord } from \"../../types\";\nimport io from \"socket.io-client\";\nimport { connect } from \"http2\";\n\nconst toSessionKey = (workflow_type: string, instance: string | number) =>\n    `session:${workflow_type}-${instance}`;\n\nconst services: IRecord<ServiceConfig<IContext, IMachineEvents>> = {\n    connectToSocketServer: (context) => (send, onEvent) => {\n        const { socket_host, query } = context;\n\n        const socket = io(socket_host);\n        console.log(\"IM AM RUNNING\", socket);\n        const socketConnected = () => {\n            console.log(\"SOCKET CONNECTED\");\n            send(\"CONNECTED\");\n        };\n        const socketDisonnected = () => {\n            console.log(\"SOCKET DISCONNECTED\");\n            send(\"SOCKET DISCONNECTED\");\n        };\n        const handleQueryResponse = (data: AnyEventObject) => {\n            console.log(\"DATA:\", data);\n            send({\n                type: \"GOT_QUERY_RESULTS\",\n                payload: data,\n            });\n        };\n\n        socket.on(\"connect\", socketConnected);\n        socket.on(\"disconnect\", socketDisonnected);\n        socket.on(\"query_response\", handleQueryResponse);\n\n        socket.emit(\"query\", query);\n\n        // onEvent((event: AnyEventObject) => {\n        //     console.log(\"MESSAGE RECIEVED FROM OWN MACHINE:\", event);\n        //     socket.emit(\"query\", event);\n        // });\n\n        // return () => {\n        //     socket.removeListener(\"connect\", socketConnected);\n        //     socket.removeListener(\"disconnect\", socketDisonnected);\n        //     socket.removeListener(\"message\", handleMessage);\n        // };\n    },\n\n    // connectToSocketServer2: (context) => (send) => {},\n};\n\nexport default services;\n"]},"metadata":{},"sourceType":"module"}